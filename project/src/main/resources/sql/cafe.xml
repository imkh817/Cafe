<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.myhome.project.dao.CafeDao">
	<!-- 카테고리별 카페 목록 -->
	<select id="getCafeList" parameterType="cafe" resultType="cafe">
		select * from (
		select rownum rn, a.* from (
		(select * from cafe
		<where>
			category_no =#{category_no}
			<!-- 검색 조건만 있을경우 -->
			<if test="keyword != null and nearByCafe == null">
				and (cafe_comment like '%'||#{keyword}||'%'
					or cafe_address like '%'||#{keyword}||'%')
			</if>
			<!-- 주소값만 있을경우 -->
			<if test="keyword == null and nearByCafe != null">
				and cafe_address like '%'||#{nearByCafe}||'%'
			</if>
			<!-- 검색 조건 & 주소값이 있을경우 -->
			<if test="keyword != null and nearByCafe != null">
				and cafe_comment like '%'||#{keyword}||'%'
				and cafe_address like '%'||#{nearByCafe}||'%'
			</if>
		</where>
		order by cafe_reg desc)a
		)
		)where rn between #{startRow} and #{endRow}
	</select>

	<!-- list페이징을 할 때 필요한 카페 총 갯수 -->
	<select id="countCafeList" parameterType="cafe" resultType="int">
		select count(*) from cafe
		<where>
			category_no=#{category_no}
			<!-- 검색 조건만 있을경우 -->
			<if test="keyword != null">
				and cafe_address like '%'||#{keyword}||'%'
			</if>
			<!-- 주소값만 있을경우 -->
			<if test="keyword == null and nearByCafe != null">
				and cafe_address like '%'||#{nearByCafe}||'%'
			</if>
			<!-- 검색 조건 & 주소값이 있을경우 -->
			<if test="keyword != null and nearByCafe != null">
				and cafe_address like '%'||#{keyword}||'%'
				and cafe_address like '%'||#{nearByCafe}||'%'
			</if>
		</where>
	</select>

	<select id="getcafe" parameterType="int" resultType="Cafe">
		select * from cafe where cafe_no=#{cafe_no}
	</select>

	<!-- cafe_avg_star 컬럼 update -->
	<update id="update_avg_cafe_star" parameterType="cafe">
		update cafe set avg_cafe_star = #{avg_cafe_star} where cafe_no = #{cafe_no}
	</update>
	
		<!-- 카페 글작성 -->
	<insert id="insertBoard" parameterType="cafe">
		insert into cafe
		(cafe_no,category_no,cafe_readcount,cafe_name,
		cafe_image,cafe_time1,cafe_time2,cafe_number,cafe_address,cafe_reg,
		cafe_menu1,cafe_menu2,cafe_menu3, cafe_comment, avg_cafe_star)
		values
		(cafe_num_seq.nextval,#{category_no},0,#{cafe_name},
		#{cafe_image},#{cafe_time1},#{cafe_time2},#{cafe_number},#{cafe_address},sysdate,
		#{cafe_menu1},#{cafe_menu2},#{cafe_menu3}, #{cafe_comment}, #{avg_cafe_star})
	</insert>
	
	<!-- 카페 글수정 -->
	<update id="updateBoard" parameterType="cafe">
		UPDATE cafe
	SET
	  cafe_name = #{cafe_name},
	  cafe_image = #{cafe_image},
	  cafe_time1 = #{cafe_time1},
	  cafe_time2 = #{cafe_time2},
	  cafe_number = #{cafe_number},
	  cafe_address = #{cafe_address},
	  cafe_reg = sysdate,
	  cafe_menu1 = #{cafe_menu1},
	  cafe_menu2 = #{cafe_menu2},
	  cafe_menu3 = #{cafe_menu3},
	  cafe_comment = #{cafe_comment}
	WHERE
	  cafe_no = #{cafe_no}
	</update>
	
	<!-- 조회수 증가 -->
	<update id="updateCaferead" parameterType="int">
		update cafe set cafe_readcount = cafe_readcount+1 where cafe_no=#{cafe_no}
	</update>


	<!-- 카페 데이터 불러오기 -->
	<select id="select" parameterType="int" resultType="cafe">
		select * from Cafe where cafe_no=#{cafe_no}
	</select>
</mapper>