<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.myhome.project.dao.ReviewDao">

	<!-- 해당 id에 해당하는 전체 리뷰 갯수 구해오기 -->
	<select id="getTotalReviewCount" parameterType="String"
		resultType="int">
		select count(*)
		from review where member_id = #{member_id}
	</select>

	<!-- 리뷰를 페이징 처리한 리스트로 가져오기 -->
	<select id="reviewPagingList" parameterType="review"
		resultType="java.util.Map">
		select * from(
		select * from cafe c join (
		select a.*, rowNum
		rn from(
		select r.* from member m join review r on m.member_id =
		r.member_id where
		r.member_id = #{member_id} order by r.review_reg
		desc)a) j
		on c.cafe_no = j.cafe_no
		)
		where rn between #{startRow} and
		#{endRow} order by rn
	</select>

	<!-- 마이페이지에서 리뷰 지우기 -->
	<delete id="deleteReview" parameterType="String">
		delete from review where
		review_no = #{review_no}
	</delete>
	
		<!-- 해시태그 구해오기 -->
	<select id="hash_avg" parameterType="Review" resultType="map">
		<![CDATA[
        SELECT hash_no, hash_name, hash_count, total_hash_count 
			FROM ( 
                SELECT h.hash_no, h.hash_name, COUNT(r.hash_no) AS hash_count 
                FROM hashtag h 
                LEFT OUTER JOIN review r ON r.hash_no = h.hash_no 
                WHERE cafe_no = #{cafe_no} 
                GROUP BY h.hash_no, h.hash_name 
                ORDER BY COUNT(r.hash_no) DESC 
                ) 
            subquery JOIN ( 
                SELECT SUM(hash_count) AS total_hash_count 
                FROM(  
                    SELECT h.hash_no, h.hash_name, COUNT(r.hash_no) AS hash_count 
                    FROM hashtag h LEFT 
                    OUTER JOIN review r ON r.hash_no = h.hash_no WHERE cafe_no = #{cafe_no} GROUP 
                    BY h.hash_no, h.hash_name ORDER BY COUNT(r.hash_no) DESC ) 
                    where rownum <=4 
                    )
                ON 1=1 
                WHERE ROWNUM <= 4
         ]]>
	</select>
	<select id="starAvg" parameterType="Review" resultType="double">
	
	<!-- select trunc(avg(cafe_star),1) as staravg from review where cafe_no = #{cafe_no} -->
	 select nvl(trunc(avg(cafe_star),1),0) as staravg from review where cafe_no = #{cafe_no}
	</select>
	
	
	
</mapper>